import re, urllib, urllib2, stringfrom datetime import datefrom BeautifulSoup import BeautifulSoupfrom htmlentitydefs import name2codepoint as n2cpimport sysUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In Sharerepo normalizeURL")	# Deal with special providerInfo URL built up by plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			# Extract out domain.		match = re.search("(sharerepo)", url.lower())				if (match):			try:				show = Prefs["show_" + match.group(1)]			except Exception, ex:				show = False							if (show):				return url + "&visible=true"			return url		def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for Sharerepo (' + url + ')')		return VideoClipObject(		title = 'Sharerepo Redirect Page',		summary = 'Sharerepo Redirect Page',		thumb = None,	)def MediaObjectsForURL(url):	#Log('In MediaObjectsForURL for Sharerepo (' + url + ')')		return [		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	]	  	return ret@indirect	def PlayVideo(url):	try:		#Log('Requesting ' + url)		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		response = urllib2.urlopen(request)			# Collect final url and read in page.		provider_url = response.geturl()				if "404" in provider_url:			return LogProviderError('Video no longer available (404 Returned)')					#Log(provider_url)		soup = BeautifulSoup(response.read())			except Exception, ex:		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)			# Extract out final video URL.	script_elems = soup.find('div', { 'class': 'video' }).findAll('script')	final_url = None		for script_elem in script_elems:			script = script_elem.string		if script is None:			continue					#Log(script)			# Look for file URL.		file = re.search("file\\s*:\\s*'([^']*)'", script)		if (file is None):			continue				final_url = file.group(1)	if (final_url is None):		return LogProviderError("Error whilst looking for video URL. RegEx not matched.", None)		# PHT Doesn't honour user_agent property. Thankfully, it uses CurlLib and that	# accepts args at the end of the url.	if Client.Platform == "Plex Home Theater":		final_url = final_url + "|User-Agent=" + USER_AGENT	Log(final_url)		return IndirectResponse(VideoClipObject, key = final_url, user_agent = USER_AGENT)	# Utility methods.def LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	raise Ex.MediaNotAvailable